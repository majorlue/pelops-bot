// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// TODO: map field names to underlying db
model Tower {
  theme            String // Tower Theme eg. Prometheus
  week             String
  floors           Floor[] // Array of floors and their encounters
  floorSubmissions FloorSubmission[]
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")

  // Defining unique constraint to be combination of theme/week
  @@id([theme, week])
  @@map("towers")
}

model Floor {
  theme     String   @map("tower_theme")
  week      String   @map("tower_week")
  floor     Int      @map("tower_floor") // Floor number 1-50
  guardians String[] // Array of primary fight sprite
  strays    String[] // Array of primary fight sprite
  puzzles   String[] // Array of puzzle type, difficulty
  chests    Int? // Chest count
  // Relation to Theme/Week
  tower     Tower    @relation(fields: [theme, week], references: [theme, week])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([theme, week, floor])
  @@map("floors")
}

model FloorSubmission {
  id        String   @id @default(uuid())
  theme     String   @map("tower_theme")
  week      String   @map("tower_week")
  floor     Int      @map("tower_floor") // Floor number 1-50
  guardians String[] // Array of primary fight sprite
  strays    String[] // Array of primary fight sprite
  puzzles   String[] // Array of puzzle type, difficulty
  chests    Int? // Chest count
  // Relation to Theme/Week
  tower     Tower    @relation(fields: [theme, week], references: [theme, week])
  user      String
  resolved  Boolean  @default(false)
  approved  Boolean?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("floor_submissions")
}

model Encounter {
  leader    String   @id @unique // Monster sprite, as it shows on map
  tier      Int // Minimum encounter tier (9, 10)
  monsters  String[] // Array of monsters in this encounter (incl. leader)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("encounters")
}

model Monster {
  id        Int      @id @default(autoincrement())
  name      String // Monster name
  statuses  String[] // buffs/debuffs/statuses, or berserk?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("monsters")
}

// table for messages that require persistent handling
model PersistentMessage {
  messageId String   @id @map("message_id")
  channelId String   @map("channel_id")
  userId    String   @map("user_id")
  guildId   String   @map("guild_id")
  testing   Boolean
  type      String? // type of handling this requires
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("persistent_messages")
}

// table of bot admins
model Admin {
  id        String   @id
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("admins")
}

// table of approved contributors who bypass the approval process on /submit
model Contributor {
  id        String   @id
  createdOn DateTime @default(now())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("contributors")
}
